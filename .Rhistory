percent.mito <- Matrix::colSums(human.Syn@raw.data[mito.genes,])/Matrix::colSums(human.Syn@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
human.Syn <- AddMetaData(object=human.Syn, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = human.Syn, features.plot = c("nGene","nUMI","percent.mito"), nCol=3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow=c(1,2))
GenePlot(object=human.Syn, gene1="nUMI",gene2="percent.mito")
GenePlot(object=human.Syn, gene1="nUMI",gene2="nGene")
# We filter out cells that have unique gene counts over 2,500 or less than
# 200 Note that low.thresholds and high.thresholds are used to define a
# 'gate' -Inf and Inf should be used if you don't want a lower or upper
# threshold.
human.Syn <- FilterCells(object = human.Syn, subset.names = c("nGene", "percent.mito"), low.thresholds=c(200,0.01),high.thresholds = c(3000,0.07))
human.Syn <- NormalizeData(object = human.Syn, normalization.method = "LogNormalize",
scale.factor = 10000)
human.Syn <- FindVariableGenes(object = human.Syn, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x=human.Syn@var.genes)
human.Syn <- ScaleData(object = human.Syn, vars.to.regress = c("nUMI","percent.mito"))
human.Syn <- RunPCA(object = human.Syn, pc.genes = human.Syn@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
# Examine and visualize PCA results a few different ways
VizPCA(object = human.Syn, pcs.use = 1:2)
PCAPlot(object = human.Syn, dim.1 = 1, dim.2 = 2)
# ProjectPCA scores each gene in the dataset (including genes not included
# in the PCA) based on their correlation with the calculated components.
# Though we don't use this further here, it can be used to identify markers
# that are strongly correlated with cellular heterogeneity, but may not have
# passed through variable gene selection.  The results of the projected PCA
# can be explored by setting use.full=T in the functions above
human.Syn <- ProjectPCA(object = human.Syn, do.print = FALSE)
PCElbowPlot(object=human.Syn)
# save.SNN = T saves the SNN so that the clustering algorithm can be rerun
# using the same graph but with a different resolution value (see docs for
# full details)
human.Syn <- FindClusters(object=human.Syn, reduction.type = "pca", dims.use = 1:7,
resolution = 0.8, print.output = 0, save.SNN = TRUE)
human.Syn <- RunTSNE(object=human.Syn, dims.use = 1:7, do.fast = TRUE)
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = human.Syn)
VlnPlot(object = human.Syn, features.plot = c("nGene","nUMI","percent.mito"), nCol=3)
GenePlot(object=human.Syn, gene1="nUMI",gene2="nGene")
GenePlot(object=human.Syn, gene1="nUMI",gene2="percent.mito")
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat. We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts. The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
# calculate the percent.mito values
mito.genes <- grep(pattern = "^MT-", x = rownames(x=human.Syn@data), value = TRUE)
percent.mito <- Matrix::colSums(human.Syn@raw.data[mito.genes,])/Matrix::colSums(human.Syn@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
human.Syn <- AddMetaData(object=human.Syn, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = human.Syn, features.plot = c("nGene","nUMI","percent.mito"), nCol=3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow=c(1,2))
GenePlot(object=human.Syn, gene1="nUMI",gene2="percent.mito")
GenePlot(object=human.Syn, gene1="nUMI",gene2="nGene")
# We filter out cells that have unique gene counts over 2,500 or less than
# 200 Note that low.thresholds and high.thresholds are used to define a
# 'gate' -Inf and Inf should be used if you don't want a lower or upper
# threshold.
human.Syn <- FilterCells(object = human.Syn, subset.names = c("nGene", "percent.mito"), low.thresholds=c(200,0.01),high.thresholds = c(3000,0.07))
# find all markers of cluster 1
cluster1.markers <- FindMarkers(object=human.Syn, ident.1=1, min.pct = 0.25)
print(x=head(x=cluster1.markers, n=5))
# find markers for every cluster compared to all remaining cells, report
# only the positive ones
humanSyn.markers <- FindAllMarkers(object=human.Syn, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
View(cluster1.markers)
View(cluster1.markers)
humanSyn.markers %>% group_by(cluster) %>% top_n(2, avg_logFC)
FeaturePlot(object = human.Syn, features.plot = c("IL7R", "CD14", "LYZ", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(humanSyn.markers)
View(humanSyn.markers %>% group_by(cluster) %>% top_n(2, avg_logFC))
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "CD79A", "LYZ", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", ,"NR3X1", "LYZ", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3X1", "LYZ", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(cluster1.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "DUSP4", "MS4A1",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(humanSyn.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "FCGR3A", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","CST3"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","XCL1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","XCL2"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(humanSyn.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","KLRA8"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","CMV1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","LY49H"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A"," Ncr1 "), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","NCR1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","NCR1","IL7R"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","NCR1","GNLY"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A","NCR1","NKG7"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CCR7","LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(cluster1.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CD8A","CCR7","LYZ", "CST3",
"CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","FCER1A"), cols.use = c("grey","blue"),reduction.use = "tsne")
cluster2.markers <- FindMarkers(object=human.Syn, ident.1=2, min.pct = 0.25)
cluster2.markers <- FindMarkers(object=human.Syn, ident.1=2, min.pct = 0.25)
cluster8.markers <- FindMarkers(object=human.Syn, ident.1=8, min.pct = 0.25)
View(cluster8.markers)
View(cluster2.markers)
VlnPlot(object = human.Syn, features.plot = c("IL7R","CD79A"))
VlnPlot(object = human.Syn, features.plot = c("IL7R","CD79A"))
# you can plot raw UMI counts as well
VlnPlot(object=pbmc, features.plot = c("NKG7","PF4"), y.log = TRUE)
VlnPlot(object=human.Syn, features.plot = c("NKG7","PF4"), y.log = TRUE)
# you can plot raw UMI counts as well
VlnPlot(object=human.Syn, features.plot = c("NKG7"), y.log = TRUE)
VlnPlot(object=human.Syn, features.plot = c("NKG7","CD8A"), y.log = TRUE)
# you can plot raw UMI counts as well
VlnPlot(object=human.Syn, features.plot = c("NKG7","CD8A","CD68"), y.log = TRUE)
VlnPlot(object=human.Syn, features.plot = c("NKG7","CD8A","CD68","PU.1"), y.log = TRUE)
VlnPlot(object=human.Syn, features.plot = c("NKG7","CD8A","CD68","SPI1"), y.log = TRUE)
VlnPlot(object=human.Syn, features.plot = c("CD8A","CD68","SPI1"), y.log = TRUE)
cluster6.markers <- FindMarkers(object=human.Syn, ident.1=6, min.pct = 0.25)
cluster6.markers <- FindMarkers(object=human.Syn, ident.1=6, min.pct = 0.25)
cluster7.markers <- FindMarkers(object=human.Syn, ident.1=7, min.pct = 0.25)
View(cluster6.markers)
View(cluster7.markers)
View(cluster7.markers)
VlnPlot(object = human.Syn, features.plot = c("IL7R","CD34"))
VlnPlot(object = human.Syn, features.plot = c("IL7R","CD7"))
cluster9.markers <- FindMarkers(object=human.Syn, ident.1=9, min.pct = 0.25)
cluster9.markers <- FindMarkers(object=human.Syn, ident.1=9, min.pct = 0.25)
print(x=head(x=cluster1.markers, n=5))
```
cluster10.markers <- FindMarkers(object=human.Syn, ident.1=10, min.pct = 0.25)
View(cluster9.markers)
View(cluster10.markers)
cluster10.markers <- FindMarkers(object=human.Syn, ident.1=11, min.pct = 0.25)
View(cluster1.markers)
View(cluster10.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CD8A","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
top10 <- humanSyn.markers %>% group_by(cluster) %>% top_n(5, avg_logFC)
DoHeatmap(object=human.Syn, genes.use=top10$gene, slim.col.label = TRUE, remove.key = TRUE)
top10 <- humanSyn.markers %>% group_by(cluster) %>% top_n(3, avg_logFC)
DoHeatmap(object=human.Syn, genes.use=top10$gene, slim.col.label = TRUE, remove.key = TRUE)
View(cluster1.markers)
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CDA4","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CD4","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CD8","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "CD4","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "FOXP3","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
View(humanSyn.markers)
View(top10)
current.cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7)
current.cluster.ids <- c(0:11)
current.cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7)
current.cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7, 8,9,10,11)
new.cluster.ids <- c("B cells", "T cell-like", "Developing T cells", "CD4 T cells",
"CD8 T cells", "Myeloid cells", "NK cells", "7", "Plasma cells", "Mast cells","10","B cell-like")
human.Syn@ident <- plyr::mapvalues(x = human.Syn@ident, from = current.cluster.ids, to = new.cluster.ids)
TSNEPlot(object = pbmc, do.label = TRUE, pt.size = 0.5)
TSNEPlot(object = human.Syn, do.label = TRUE, pt.size = 0.5)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/research/single_cell")
library(Seurat)
library(dplyr)
library(Matrix)
# Load the PBMC dataset
humanSyn.data <- Read10X(data.dir = "./filtered_gene_bc_matrices/GRCh38/")
# Examine the memory savings between regular and sparse matrices
dense.size <- object.size(x=as.matrix(x=humanSyn.data))
dense.size
sparse.size <- object.size(x = humanSyn.data)
sparse.size
dense.size/sparse.size
# Initialize the Seurat object with the raw (non-normalized data).  Keep all
# genes expressed in >= 4 cells (~0.1% of the data). Keep all cells with at
# least 200 detected genes
human.Syn <- CreateSeuratObject(raw.data = humanSyn.data, min.cells = 4, min.genes = 200, project = "10X_humanSyn")
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat. We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts. The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
# calculate the percent.mito values
mito.genes <- grep(pattern = "^MT-", x = rownames(x=human.Syn@data), value = TRUE)
percent.mito <- Matrix::colSums(human.Syn@raw.data[mito.genes,])/Matrix::colSums(human.Syn@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
human.Syn <- AddMetaData(object=human.Syn, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = human.Syn, features.plot = c("nGene","nUMI","percent.mito"), nCol=3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow=c(1,2))
GenePlot(object=human.Syn, gene1="nUMI",gene2="percent.mito")
GenePlot(object=human.Syn, gene1="nUMI",gene2="nGene")
# We filter out cells that have unique gene counts over 2,500 or less than
# 200 Note that low.thresholds and high.thresholds are used to define a
# 'gate' -Inf and Inf should be used if you don't want a lower or upper
# threshold.
human.Syn <- FilterCells(object = human.Syn, subset.names = c("nGene", "percent.mito"), low.thresholds=c(200,0.01),high.thresholds = c(3000,0.07))
human.Syn <- NormalizeData(object = human.Syn, normalization.method = "LogNormalize",
scale.factor = 10000)
human.Syn <- FindVariableGenes(object = human.Syn, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x=human.Syn@var.genes)
human.Syn <- ScaleData(object = human.Syn, vars.to.regress = c("nUMI","percent.mito"))
human.Syn <- RunPCA(object = human.Syn, pc.genes = human.Syn@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
PCElbowPlot(object=human.Syn)
# save.SNN = T saves the SNN so that the clustering algorithm can be rerun
# using the same graph but with a different resolution value (see docs for
# full details)
human.Syn <- FindClusters(object=human.Syn, reduction.type = "pca", dims.use = 1:7,
resolution = 0.8, print.output = 0, save.SNN = TRUE)
human.Syn <- RunTSNE(object=human.Syn, dims.use = 1:7, do.fast = TRUE)
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = human.Syn)
current.cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7, 8,9,10,11)
new.cluster.ids <- c("B cells", "T cell-like", "Developing T cells", "CD4 T cells",
"CD8 T cells", "Myeloid cells", "NK cells", "7", "Plasma cells", "Mast cells","10","B cell-like")
human.Syn@ident <- plyr::mapvalues(x = human.Syn@ident, from = current.cluster.ids, to = new.cluster.ids)
TSNEPlot(object = human.Syn, do.label = TRUE, pt.size = 0.5)
VlnPlot(object = human.Syn, features.plot = c("IRF4","IRF8"))
VlnPlot(object = human.Syn, features.plot = c("IRF4","IRF8"))
VlnPlot(object = human.Syn, features.plot = c("IRF4","IRF8"))
VlnPlot(object = human.Syn, features.plot = c("IRF4","BATF3"))
humanSyn.markers <- FindAllMarkers(object=human.Syn, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
View(humanSyn.markers)
cluster5.markers <- FindMarkers(object=human.Syn, ident.1=5, min.pct = 0.25)
cluster5.markers <- FindMarkers(object=human.Syn, ident.1="Myeloid cells", min.pct = 0.25)
View(cluster5.markers)
VlnPlot(object = human.Syn, features.plot = c("IRF4","CD1C"))
VlnPlot(object = human.Syn, features.plot = c("IRF4","ZBTB"))
zbtb.genes <- grep(pattern = "^ZBTB", x = rownames(x=human.Syn@data), value = TRUE)
zbtb.genes
VlnPlot(object = human.Syn, features.plot = c("IRF4","ZBTB46"))
VlnPlot(object = human.Syn, features.plot = c("IRF4","ZBTB46"))
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "FOX","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7","FCGR3A","GNLY","NKG7","STMN1"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1", "FOX","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7"), cols.use = c("grey","blue"),reduction.use = "tsne")
FeaturePlot(object = human.Syn, features.plot = c("MS4A1", "NR3C1","CCR7","LYZ", "CST3", "CD8A", "CD14", "MS4A7"), cols.use = c("grey","blue"),reduction.use = "tsne")
binom()
pbinom()
?pbinom
?pbeta
pbeta(0.5, 1, 5)
pbeta(0.35,8,16)
qbeta(0.975,8,16)
qbeta(0.025,8,16)
pbeta(0.35,8,21)
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,1,1),type="l")
plot(theta,dbeta(theta,1,5),type="l")
?pgamma
pgamma(0.05, 67,6)
qgamma(0.05, 67,6)
?pgamma
pgamma(0.1,6,73.5)
qgamma(0.975,9,384)
theta <- seq(from=0, to=1, by=0.01)
plot(theta, dgamma(theta,9,384))
plot(theta, dgamma(theta,9,384),type="l")
?dexp
y <- seq(from=0, to=120, by=1)
plot((384^9)*9/(384+y)^10)
plot((384^9)*9/(384+y)^10, type = 'l')
pgamma(0.1,6,93.5)
dnorm(0.975,96.17, 0.042 )
?dnorm
qnorm(0.975,96.17, 0.042 )
pnorm(100,96.17,0.042)
pnorm(100,96.17,0.042, lower.tail = F)
z <- rgamma(n=1000, shape=3, rate=200)
x <- 1/z
mean(x)
z <- rgamma(1000, shape=16.5, rate=6022.9)
sig2 <- 1/z
mu <- rnorm(1000, mean=609.3, sd=sqrt(sig2/27.1))
quantile(x=mu, probs=c(0.025, 0.975))
z <- rgamma(1000, shape=18, rate=6796.44)
sig2 <- 1/z
z <- rgamma(1000, shape=16.5, rate=6022.9)
sig1 <- 1/z
mu1 <- mu
mu2 <- rnorm(1000, mean=622.39, sd=sqrt(sig2/30.1))
sum( mu2 > mu1 ) / 1000
qnorm(0.975,96.17, sqrt(0.042) )
dat <- read.table("http://www.stat.ufl.edu/~winner/data/pgalpga2008.dat")
datF <- subset(dat, FM==1, select=1:2)
View(dat)
datF <- subset(dat, V3==1, select=1:2)
plot(V1,V2)
?plot
plot(datF$V1,datF$V2)
datM <- subset(dat, V3==2, select=1:2)
plot(datM$V1,datM$V2)
summary(lm(data = datF, V2~V1))
F <- lm(data = datF, V2~V1)
predict(F, data.frame(V1=260),interval="predict")
lol <- lm(data = dat, V2 ~ V1+V3)
summary(lol)
lol <- lm(data = dat, V2 ~ V1+factor(V3)
)
summary(lol)
plot(fitted(lol), residuals(lol))
m <- matrix(20,5)
m
m <- matrix(0,20,5)
m
for(i in 1:100){}
for(i in 1:100){}
m <- matrix(0,20,5)
for (i in 1:20){
for (j in 1:5){
m[i,j] <- rnorm(0,1)
}
}
m[i,j] <- rnorm(1,0,1)
m <- matrix(0,20,5)
for (i in 1:20){
for (j in 1:5){
m[i,j] <- rnorm(1,0,1)
}
}
m
for (i in 1:20){
rownames(m[i,]) <- i
for (j in 1:5){
m[i,j] <- rnorm(1,0,1)
colnames(m[,j]) <- j
}
}
m <- matrix(0,20,5)
m
for (i in 1:20){
#rownames(m[i,]) <- i
for (j in 1:5){
m[i,j] <- rnorm(1,0,1)
#colnames(m[,j]) <- j
}
}
m
mp2,
m[2,]
coldata <- read.table("./sampletable.txt",sep="\t",header=T)
View(coldata)
cts <- read.table('./Aging_Monocytes_final_count.txt',row.names=1,sep="\t",header=T)
View(cts)
View(coldata)
View(cts)
coldata <- read.table("./sampletable.txt",sep="\t",header=T)
View(coldata)
setwd("D:/research/single_cell")
library(Seurat)
library(dplyr)
library(Matrix)
# Load the PBMC dataset
humanSyn.data <- Read10X(data.dir = "./filtered_gene_bc_matrices/GRCh38/")
# Examine the memory savings between regular and sparse matrices
dense.size <- object.size(x=as.matrix(x=humanSyn.data))
dense.size
sparse.size <- object.size(x = humanSyn.data)
sparse.size
dense.size/sparse.size
# Initialize the Seurat object with the raw (non-normalized data).  Keep all
# genes expressed in >= 4 cells (~0.1% of the data). Keep all cells with at
# least 200 detected genes
human.Syn <- CreateSeuratObject(raw.data = humanSyn.data, min.cells = 4, min.genes = 200, project = "10X_humanSyn")
colMeans(humanSyn.data)
head(humanSyn.data@x)
head(humanSyn.data)
head(as.matrix(humanSyn.data))
dim(as.matrix(humanSyn.data))
mean(colMeans(as.matrix(humanSyn.data)))
mean(colSums(as.matrix(humanSyn.data)))
colSums(as.matrix(humanSyn.data)[,1])
colSums(as.matrix(humanSyn.data)[,1:2])
colSums(as.matrix(humanSyn.data)[,1:5])
version
setwd("R:\Medicine\Rheumatology\Winter_Lab\Shared\Sam_AMP_data\single_cell\expression\Expression_files_2017-05-12")
setwd("R:/Medicine/Rheumatology/Winter_Lab/Shared/Sam_AMP_data/single_cell/expression/Expression_files_2017-05-12")
library(Seurat)
library(dplyr)
library(Matrix)
?TSNEPlot
FindClusters
?FindClusters
q=matrix(c(0,1,))
q=matrix(c(0,1,0.3,0.7),nrow=2,byrow = T)
q
q %*% q
q30=q
for (i in 2:20){q30=q30 %in% q}
q30
q30=q
for (i in 2:20){q30=q30 %*% q}
q
q30
c(1,0)%*%q%*%q%*%q
x <- 1:100000
delta <- x/100000
delta
s <- exp(-(0.5+4*delta))
hist(s)
plot(s)
exp(-0.5)
summary(delta)
plot(s,x)
plot(z,s)
plot(x,s)
distance <- 1:100000
delta <- x/100000
s <- exp(-(0.5+4*delta))
plot(x,s)
score <- exp(-(0.5+4*delta))
plot(distance,s)
plot(distance,score)
devtools::install_github("slowkow/tftargets")
library(tftargets)
head(Marbach2016[["STAT3"]], 100)
Marbach2016[["STAT3"]]
length(Marbach2016[["STAT3"]])
length(Marbach2016[["CEBPB"]])
length(Marbach2016[["GATA1"]])
length(Marbach2016[["GATA2"]])
distance <- 1:100000
delta <- x/100000
score <- exp(-(0.5+4*delta))
plot(distance,score)
distance <- 1:100000
delta <- distance/100000
score <- exp(-(0.5+4*delta))
plot(distance,score)
library(tftargets)
length(Marbach2016[["STAT3"]])
length(Marbach2016[["CEBPB"]])
length(Marbach2016[["GATA2"]])
length(Marbach2016[["GATA1"]])
library(tftargets)
head(TRRUST[["STAT3"]], 100)
length(TRRUST[["STAT3"]])
length(TRRUST[["CEBPB"]])
length(TRRUST[["GATA1"]])
STAT3 <- read.table("C:/Users/USER/Downloads/STAT3_targets.human.tsv")
STAT3 <- read.table("D:/research/quals/CEBPB_targets.human.tsv")
View(STAT3)
STAT3 <- read.table("D:/research/quals/CEBPB_targets.human.tsv")[,2]
options(stringsAsFactors = F)
library(tftargets)
length(Marbach2016[["STAT3"]])
STAT3 <- read.table("D:/research/quals/CEBPB_targets.human.tsv")[,2]
STAT3 <- read.table("D:/research/quals/STAT3_targets.human.tsv")[,2]
CEBPB <- read.table("D:/research/quals/CEBPB_targets.human.tsv")[,2]
GATA1 <- read.table("D:/research/quals/GATA1_targets.human.tsv")[,2]
length(intersect(CEBPB,Marbach2016[["CEBPB"]]))
length(intersect(STAT3,Marbach2016[["STAT3"]]))
length(intersect(GATA1,Marbach2016[["GATA1"]]))
length(union(CEBPB,Marbach2016[["CEBPB"]]))
length(union(STAT3,Marbach2016[["STAT3"]]))
length(intersect(union,Marbach2016[["GATA1"]]))
length(union(GATA1,Marbach2016[["GATA1"]]))
library(Seurat)
?VlnPlot
source("https://bioconductor.org/biocLite.R")
biocLite("RNASeqPower")
library(RNASeqPower)
rnapower(depth=20, cv=.4, effect=c(1.25, 1.5, 1.75, 2),
alpha= .05, power=c(.8, .9))
rnapower(depth=20, cv=.4, effect=c(1.25, 1.5, 1.75, 2),
alpha= .05, power=c(.7, .9))
rnapower(depth=200, cv=.4, effect=c(1.25, 1.5, 1.75, 2),
alpha= .05, power=c(.7, .9))
rnapower(depth=300, cv=.4, effect=c(1.25, 1.5, 1.75, 2),
alpha= .05, power=c(.7, .9))
rnapower(depth=300, cv=.4, effect=c(1.25, 1.5, 1.75, 2),
alpha= .05, power=c(.8, .9))
setwd("D:/research/magnet/magnet_0.6.1")
scan("text.txt")
scan("text.txt",character())
x <- scan("text.txt",character())
table(x)
sort(table(x))
head(sort(table(x)))
tail(sort(table(x)))
tail(sort(table(x)),100)
